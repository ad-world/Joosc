Terminals unused in grammar

    IF
    WHILE
    FOR
    EXTENDS
    IMPLEMENTS
    PUBLIC
    PROTECTED
    PRIVATE
    STATIC
    ABSTRACT
    THIS
    VOID
    FINAL
    IMPORT
    CLASS
    PACKAGE
    INTERFACE
    OPENING_BRACE
    CLOSING_BRACE
    OPENING_PAREN
    CLOSING_PAREN
    OPENING_BRACKET
    CLOSING_BRACKET
    SEMI_COLON
    DOT
    NATIVE
    ASSIGNMENT
    RETURN
    INT
    BOOLEAN
    CHAR
    BYTE
    SHORT
    ARRAY
    TRUE
    FALSE
    STRING_LITERAL
    INTEGER
    NULL_TOKEN
    CHAR_LITERAL
    MULTI_LINE_COMMENT
    SINGLE_LINE_COMMENT
    JAVADOC_COMMENT
    NEGATE
    PLUS
    MINUS
    MULTIPLY
    DIVIDE
    MODULO
    LESS_THAN
    GREATER_THAN
    LESS_THAN_EQUAL
    GREATER_THAN_EQUAL
    BOOLEAN_EQUAL
    NOT_EQUAL
    AMPERSAND
    PIPE


Grammar

    0 $accept: program EOF

    1 program: IDENTIFIER


Terminals, with rules where they appear

    EOF (0) 0
    error (256)
    IF (258)
    WHILE (259)
    FOR (260)
    EXTENDS (261)
    IMPLEMENTS (262)
    PUBLIC (263)
    PROTECTED (264)
    PRIVATE (265)
    STATIC (266)
    ABSTRACT (267)
    THIS (268)
    VOID (269)
    FINAL (270)
    IMPORT (271)
    CLASS (272)
    PACKAGE (273)
    INTERFACE (274)
    OPENING_BRACE (275)
    CLOSING_BRACE (276)
    OPENING_PAREN (277)
    CLOSING_PAREN (278)
    OPENING_BRACKET (279)
    CLOSING_BRACKET (280)
    SEMI_COLON (281)
    DOT (282)
    IDENTIFIER <std::string> (283) 1
    NATIVE (284)
    ASSIGNMENT (285)
    RETURN (286)
    INT (287)
    BOOLEAN (288)
    CHAR (289)
    BYTE (290)
    SHORT (291)
    ARRAY (292)
    TRUE (293)
    FALSE (294)
    STRING_LITERAL (295)
    INTEGER (296)
    NULL_TOKEN (297)
    CHAR_LITERAL (298)
    MULTI_LINE_COMMENT (299)
    SINGLE_LINE_COMMENT (300)
    JAVADOC_COMMENT (301)
    NEGATE (302)
    PLUS (303)
    MINUS (304)
    MULTIPLY (305)
    DIVIDE (306)
    MODULO (307)
    LESS_THAN (308)
    GREATER_THAN (309)
    LESS_THAN_EQUAL (310)
    GREATER_THAN_EQUAL (311)
    BOOLEAN_EQUAL (312)
    NOT_EQUAL (313)
    AMPERSAND (314)
    PIPE (315)


Nonterminals, with rules where they appear

    $accept (61)
        on left: 0
    program <ParseTreeNode> (62)
        on left: 1
        on right: 0


State 0

    0 $accept: • program EOF

    IDENTIFIER  shift, and go to state 1

    program  go to state 2


State 1

    1 program: IDENTIFIER •

    $default  reduce using rule 1 (program)


State 2

    0 $accept: program • EOF

    EOF  shift, and go to state 3


State 3

    0 $accept: program EOF •

    $default  accept

// Modified from https://github.com/llvm-mirror/clang/blob/master/tools/clang-fuzzer/cxx_proto.proto
// Supports
//  - Function calls
//  - Local variables
//  - Assignments
//  - IfThen
//  - IfThenElse
//  - While
//  - For

syntax = "proto2";
package joosc_fuzzer;

message VarRef {
    required int32 varnum = 1;
}

message FunctionRef {
    required int32 funcnum = 1;
}

message Lvalue {
    required VarRef varref = 1;
}

message Rvalue {
    oneof rvalue_oneof {
        VarRef varref = 1;
        BinaryOp binop = 2;
        MethodInvocation method_invoc = 3;
    }
    required Const cons = 4;
}

message Const {
    required int32 val = 1;
}

message BinaryOp {
    enum Op {
        ADD     = 0;
        SUB     = 1;
        MUL     = 2;
        DIV     = 3;
        MOD     = 4;
    };
    required Op op = 1;
    required Rvalue left = 2;
    required Rvalue right = 3;
}

message BoolRvalue {
    oneof bool_binop_oneof {
        BoolToBoolOp boolop = 1;
        IntToBoolOp intop = 2;
    }
    required bool cons = 3;
}

message BoolToBoolOp {
    enum Op {
        AND     = 0;
        OR      = 1;
        EAND    = 2;
        EOR     = 3;
        EQ      = 4;
        NEQ     = 5;
    }
    required Op op = 1;
    required BoolRvalue left = 2;
    required BoolRvalue right = 3;
}

message IntToBoolOp {
    enum Op {
        LT      = 0;
        GT      = 1;
        LEQ     = 2;
        GEQ     = 3;
        EQ      = 4;
        NEQ     = 5;
    }
    required Op op = 1;
    required Rvalue left = 2;
    required Rvalue right = 3;
}

///////////////////////////////////////
//              Statements
///////////////////////////////////////
message AssignmentStatement {
    required Lvalue lvalue = 1;
    required Rvalue rvalue = 2;
}

message MethodInvocation {
    required FunctionRef funcref = 1;
}

message MethodInvocationStatement {
    required MethodInvocation method_invocation = 1;
}

// message VarDecl {
//     required Lvalue lvalue = 1;
//     required Rvalue rvalue = 2;
// }

message IfThen {
    required BoolRvalue cond = 1;
    required StatementSeq if_body = 2;
}

message IfElse {
    required BoolRvalue cond = 1;
    required StatementSeq if_body = 2;
    required StatementSeq else_body = 3;
}

message While {
    required BoolRvalue cond = 1;
    required StatementSeq body = 2;
}

message ReturnStatement {
    required Rvalue rval = 1;
}

message Statement {
    oneof stmt_oneof {
        IfThen                      ifthen      = 2;
        IfElse                      ifelse      = 3;
        While                       while_loop  = 4;
        ReturnStatement             ret_stmt    = 5;
        MethodInvocationStatement   method_call = 6;
        // VarDecl                     declaration = 6;
    }
    required AssignmentStatement         assignment  = 1;
}
///////////////////////////////////////

message StatementSeq {
    repeated Statement statements = 1;
}

message Function {
    required StatementSeq body = 1;
    required ReturnStatement ret_stmt = 2;
}

message StaticField {
    required Lvalue lvalue = 1;
    required Const cons = 2;
}

message Class {
    required Function main_body = 1;
    repeated StaticField fields = 2;
    repeated Function methods = 3;
}

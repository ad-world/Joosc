// This Java program was generated by ChatGPT

public class J1_heapsort {

    public J1_heapsort() { }
    
    public static void heapSort(int[] arr) {
        int n = arr.length;
    
        // Build heap (rearrange array)
        for (int i = n / 2 - 1; i >= 0; i = i - 1)
            J1_heapsort.heapify(arr, n, i);
    
        // One by one extract an element from heap
        for (int i = n - 1; i >= 0; i = i - 1) {
            // Move current root to end
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;
    
            // call max heapify on the reduced heap
            J1_heapsort.heapify(arr, i, 0);
        }
    }
    
    protected static void heapify(int[] arr, int n, int i) {
        int largest = i; // Initialize largest as root
        int l = 2 * i + 1; // left = 2*i + 1
        int r = 2 * i + 2; // right = 2*i + 2
    
        // If left child is larger than root
        if (l < n && arr[l] > arr[largest])
            largest = l;
    
        // If right child is larger than largest so far
        if (r < n && arr[r] > arr[largest])
            largest = r;
    
        // If largest is not root
        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;
    
            // Recursively heapify the affected sub-tree
            J1_heapsort.heapify(arr, n, largest);
        }
    }

    public static int test() {
        int[] a = new int[7];
        a[0] = 64; a[1] = 34; a[2] = 24; a[3] = -12; a[4] = 22; a[5] = 11; a[6] = 100;
        J1_heapsort.heapSort(a);
        return a[6] + a[1] + a[0] + a[3];
    }

}

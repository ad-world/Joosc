# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use versions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

before_script:
  - apt-get update -qq && apt-get install -y -qq python3 python3-pip ninja-build gcc flex bison valgrind time git zip cmake nasm clang

stages:
  - build
  - test
  - fuzz

image:
  name: gcc
  pull_policy: [always, if-not-present]

PROJECT_BUILD:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # before_script:
  #   - apt update && apt -y install make autoconf
  script:
    - make build
  artifacts:
    paths:
      - joosc
  cache:
    key: "$CI_PIPELINE_ID"
    policy: push
    paths:
      - .cache
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"

UNIT_TEST:
  stage: test
  script: make unit-test
  cache:
    key: "$CI_PIPELINE_ID"
    policy: pull
    paths:
      - .cache

SCANNER_TEST:
  stage: test
  script: make scanner-test
  cache:
    key: "$CI_PIPELINE_ID"
    policy: pull
    paths:
      - .cache

INTEGRATION_TEST:
  stage: test
  script: make integration-test
  cache:
    key: "$CI_PIPELINE_ID"
    policy: pull
    paths:
      - .cache
  allow_failure: true

SUBMISSION:
  stage: .post
  needs:
    - PROJECT_BUILD
  script: make submission anum=4
  artifacts:
    paths:
      - a*.zip
  cache:
    key: "$CI_PIPELINE_ID"
    policy: pull
    paths:
      - .cache

include:
  - template: Coverage-Fuzzing.gitlab-ci.yml

fuzz_joosc:
  extends: .fuzz_base
  before_script:
    # From template
    - export COVFUZZ_JOB_TOKEN="$CI_JOB_TOKEN"
    - export COVFUZZ_PRIVATE_TOKEN="$CI_PRIVATE_TOKEN"
    - export COVFUZZ_PROJECT_PATH="$CI_PROJECT_PATH"
    - export COVFUZZ_PROJECT_ID="$CI_PROJECT_ID"
    - if [ -x "$(command -v apt-get)" ] ; then apt-get update && apt-get install -y wget; fi
    - wget -O gitlab-cov-fuzz "${COVFUZZ_URL_PREFIX}"/"${COVFUZZ_VERSION}"/binaries/gitlab-cov-fuzz_Linux_x86_64
    - chmod a+x gitlab-cov-fuzz
    - export REGRESSION=true
    - if [[ "$CI_COMMIT_BRANCH" = "$COVFUZZ_BRANCH" ]]; then REGRESSION=false; fi;
  script:
    # Build your fuzz target binary in these steps, then run it with gitlab-cov-fuzz
    # See our example repos for how you could do this with any of our supported languages
    - apt-get update -qq && apt-get install -y -qq python3 python3-pip ninja-build gcc flex bison valgrind time git zip cmake nasm clang
    - make fuzzer
    - ./gitlab-cov-fuzz run --regression=$REGRESSION -- ./fuzzer
